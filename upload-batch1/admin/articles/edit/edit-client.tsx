"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { ArrowLeft, Save, Eye, DollarSign, Tag, Sparkles } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { RichTextEditor } from "@/components/rich-text-editor"
import { generateSlug, generateTags } from "@/lib/pinyin"
import { toast } from "sonner"

interface Category {
  id: string
  name: string
  slug: string
}

interface Tag {
  id: string
  name: string
  color?: string
}

interface EditClientProps {
  categories: Category[]
  article?: {
    id: string
    title: string
    slug: string
    excerpt: string | null
    content: string
    categoryId: string | null
    status: string
    tags?: Tag[]
  }
}

export function EditClient({ categories, article }: EditClientProps) {
  const router = useRouter()
  const [title, setTitle] = useState(article?.title || "")
  const [slug, setSlug] = useState(article?.slug || "")
  const [excerpt, setExcerpt] = useState(article?.excerpt || "")
  const [content, setContent] = useState(article?.content || "")
  const [categoryId, setCategoryId] = useState(article?.categoryId || "")
  const [status, setStatus] = useState<"DRAFT" | "PUBLISHED">(
    (article?.status as "DRAFT" | "PUBLISHED") || "DRAFT"
  )
  const [isSaving, setIsSaving] = useState(false)
  const [autoGeneratedTags, setAutoGeneratedTags] = useState<string[]>([])

  // 当标题改变时自动生成拼音别名
  useEffect(() => {
    if (title && !article) {
      const newSlug = generateSlug(title)
      setSlug(newSlug)
    }
  }, [title, article])

  // 当标题或内容改变时自动生成标签（只在保存时生成）
  useEffect(() => {
    // 移除自动生成标签的逻辑，改为在保存时生成
  }, [title, content])

  const handleAutoGenerateTags = () => {
    const tags = generateTags(title, content)
    setAutoGeneratedTags(tags)
    toast.success(`自动生成了 ${tags.length} 个标签`)
  }


  const handleSave = async (saveStatus: "DRAFT" | "PUBLISHED") => {
    if (!title.trim()) {
      alert('请输入文章标题')
      return
    }

    setIsSaving(true)
    try {
      // 在保存时生成标签
      const tags = generateTags(title, content)
      setAutoGeneratedTags(tags)

      const url = article 
        ? `/api/articles/${article.id}` 
        : '/api/articles'
      
      const response = await fetch(url, {
        method: article ? 'PUT' : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title,
          slug: slug || generateSlug(title),
          excerpt,
          content,
          categoryId: categoryId || null,
          status: saveStatus,
          autoTags: tags
        })
      })

      if (response.ok) {
        alert(saveStatus === 'PUBLISHED' ? '文章已发布!' : '文章已保存为草稿!')
        router.push('/admin/articles')
        router.refresh()
      } else {
        const data = await response.json()
        alert(data.error || '保存失败')
      }
    } catch (error) {
      alert('保存失败')
    } finally {
      setIsSaving(false)
    }
  }

  const hasPaidContent = content.includes("<!--PAID_CONTENT-->")

  // 自动生成slug
  const handleTitleChange = (value: string) => {
    setTitle(value)
    if (!article) {
      const autoSlug = value
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^\w\-\u4e00-\u9fa5]+/g, '')
      setSlug(autoSlug)
    }
  }

  return (
    <div className="p-8 max-w-6xl mx-auto">
      {/* 顶部操作栏 */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.back()}
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div>
            <h1 className="text-3xl font-bold">{article ? '编辑文章' : '新建文章'}</h1>
            <p className="text-muted-foreground mt-1">创建或编辑文章内容</p>
          </div>
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            onClick={() => handleSave('DRAFT')}
            disabled={isSaving}
          >
            <Save className="h-4 w-4 mr-2" />
            保存草稿
          </Button>
          <Button 
            onClick={() => handleSave('PUBLISHED')}
            disabled={isSaving}
          >
            <Eye className="h-4 w-4 mr-2" />
            {isSaving ? '发布中...' : '发布文章'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-3 gap-6">
        {/* 主要内容区 */}
        <div className="col-span-2 space-y-6">
          {/* 基本信息 */}
          <Card>
            <CardHeader>
              <CardTitle>基本信息</CardTitle>
              <CardDescription>填写文章的标题和摘要</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="title">文章标题 *</Label>
                <Input
                  id="title"
                  placeholder="输入文章标题..."
                  value={title}
                  onChange={(e) => handleTitleChange(e.target.value)}
                  className="mt-1.5"
                />
              </div>
              
              <div>
                <Label htmlFor="slug">URL别名</Label>
                <Input
                  id="slug"
                  placeholder="自动生成"
                  value={slug}
                  onChange={(e) => setSlug(e.target.value)}
                  className="mt-1.5 font-mono text-sm"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  留空将自动根据标题生成
                </p>
              </div>
              
              <div>
                <Label htmlFor="excerpt">文章摘要</Label>
                <Textarea
                  id="excerpt"
                  placeholder="输入文章摘要..."
                  value={excerpt}
                  onChange={(e) => setExcerpt(e.target.value)}
                  rows={3}
                  className="mt-1.5"
                />
              </div>
            </CardContent>
          </Card>

          {/* 自动标签生成 */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Tag className="h-5 w-5" />
                    自动标签生成
                  </CardTitle>
                  <CardDescription>系统将根据文章内容自动生成相关标签</CardDescription>
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleAutoGenerateTags}
                  className="gap-2"
                >
                  <Sparkles className="h-4 w-4" />
                  重新生成标签
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* 自动生成的标签预览 */}
              {autoGeneratedTags.length > 0 && (
                <div>
                  <Label className="text-sm font-medium">系统生成的标签</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {autoGeneratedTags.map((tagName) => (
                      <Badge
                        key={tagName}
                        variant="secondary"
                        className="gap-1"
                      >
                        <Sparkles className="h-3 w-3" />
                        {tagName}
                      </Badge>
                    ))}
                  </div>
                  <p className="text-xs text-muted-foreground mt-2">
                    这些标签将在保存文章时自动创建并关联
                  </p>
                </div>
              )}

              {autoGeneratedTags.length === 0 && (title || content) && (
                <div className="text-center py-4">
                  <Tag className="h-8 w-8 mx-auto text-muted-foreground mb-2" />
                  <p className="text-sm text-muted-foreground">
                    输入文章标题和内容后，系统将自动生成相关标签
                  </p>
                </div>
              )}

              {!title && !content && (
                <div className="text-center py-4">
                  <Tag className="h-8 w-8 mx-auto text-muted-foreground mb-2" />
                  <p className="text-sm text-muted-foreground">
                    请先输入文章标题和内容
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* 文章内容 */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div>
                  <CardTitle>文章内容</CardTitle>
                  <CardDescription>使用富文本编辑器编写文章，支持格式化、插入图片等</CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              {hasPaidContent && (
                <Alert className="mb-4 border-amber-200 bg-amber-50">
                  <DollarSign className="h-4 w-4 text-amber-600" />
                  <AlertDescription className="text-amber-800">
                    检测到付费内容标记。分隔线上方的内容为免费预览，下方内容需要付费才能查看。
                  </AlertDescription>
                </Alert>
              )}
              
              <RichTextEditor
                content={content}
                onChange={setContent}
                placeholder="开始编写文章内容..."
                showPreview={true}
                showPaidSeparator={true}
              />
              
              <div className="mt-2 text-xs text-muted-foreground">
                字数统计：{content.length} 字符
                {hasPaidContent && (
                  <span className="ml-4 text-amber-600 font-medium">
                    · 包含付费内容
                  </span>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* 侧边栏设置 */}
        <div className="space-y-6">
          {/* 发布设置 */}
          <Card>
            <CardHeader>
              <CardTitle>发布设置</CardTitle>
              <CardDescription>文章状态和分类</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="status">状态</Label>
                <Select value={status} onValueChange={(v: any) => setStatus(v)}>
                  <SelectTrigger className="mt-1.5">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="DRAFT">草稿</SelectItem>
                    <SelectItem value="PUBLISHED">已发布</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="category">分类</Label>
                <Select value={categoryId} onValueChange={setCategoryId}>
                  <SelectTrigger className="mt-1.5">
                    <SelectValue placeholder="选择分类" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((cat) => (
                      <SelectItem key={cat.id} value={cat.id}>
                        {cat.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* 使用说明 */}
          <Card>
            <CardHeader>
              <CardTitle>使用说明</CardTitle>
            </CardHeader>
            <CardContent className="text-sm text-muted-foreground space-y-2">
              <p className="font-medium text-foreground">富文本编辑器功能:</p>
              <ul className="list-disc list-inside space-y-1 text-xs">
                <li><strong>文本格式</strong>: 粗体、斜体、下划线、删除线</li>
                <li><strong>标题</strong>: H1、H2、H3 标题格式</li>
                <li><strong>列表</strong>: 有序列表、无序列表</li>
                <li><strong>对齐</strong>: 左对齐、居中、右对齐</li>
                <li><strong>插入</strong>: 链接、图片、引用、代码块</li>
                <li><strong>付费内容</strong>: 点击💰按钮插入付费分隔线</li>
              </ul>
              
              <p className="text-xs mt-4">
                💡 支持预览模式，可以实时查看文章效果
              </p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}


